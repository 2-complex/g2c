

Other than here in this rule forbidding it, the word "simple" is stricken from this project.  In
general, language which implies that code is easy to understand shall be avoided.  Understanding
software is something that comes with years of practice, and the work required to understand the
code in this project will not be trivialized in the language of the documentation.  Comments or
other documentation shall be used to describe what functions, classes and other parts of the code
do without carrying implication of ease or difficulty of use.


Filenames shall be all lower case.


Contrary to popular convention, classes may share a file.  In fact classes should share a file
when they all depend on each other.

If class B depends on class A, A may be separated into a file of its own when there is a use-case
for A without B.

When a class is defined in a single file of its own, that file is named after the class.


Lines of code shall not exceed 100 characters in length.


When a line starts to gets long, break it up like this:

returnValue = outerfunction(innerFunction(
	argument, otherArgument, thirdArgument));

...or...

returnValue = outerfunction(
	innerFunction(
		argument,
		otherArgument,
		thirdArgument));

Not like this:

returnValue = outerfunction(innerFunction(argument,
                                          otherArgument,
                                          thirdArgument));

Same with function prototypes and definitions and so on.


Lining things up is okay, like commas in a matrix constructor:

Mat4 m = Mat4(
	  1,   0,  0,  0,
	0.5, 0.5,  0,  0,
	  0,   0, -3,  0
	  0,   0,  0,  1 );

But not avoid when changing one line might involve tweaking a bunch of lines around,
such as in a string constant for shadercode, so do this:

string code = "\n"
	+ "attribute vec3 position;\n"
	+ "\n"
	+ "void main()\n"
	+ "{\n"
	+ "	gl_Position = vec4(position, 1.0);\n"
	+ "}\n"

Don't do this:

string code = "                               \n"
	+ "attribute vec3 position;               \n"
	+ "                                       \n"
	+ "void main()                            \n"
	+ "{                                      \n"
	+ "	gl_Position = vec4(position, 1.0);    \n"
	+ "}                                      \n"

It's tempting, but adding a line longer than the column of \n's allows means
changing each one.  It's cumbersome and clutters up the diff.


Braces for control structures and function definitions go on the following line.

if( ... )
{
	
}
else
{
	
}

NOT

if( ... ) {
	
}

Control structures without braces are allowed with an indent.

if( ... )
	foo();

NOT

if( ... ) foo();


No tab characters allowed in c/c++ files or header files.

End of line characters are '\n', that's ascii character 10, not ascii character 13.

